library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
SteamYield_Testset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "test")
View(SteamYield_Trainset)
View(SteamYield_Testset)
## Input data
SteamYield_prediction_train <- subset(SteamYield_prediction_train, select = c(-Date))
SteamYield_prediction_test <- subset(SteamYield_prediction_test, select = c(-Date))
train.data.frame <- SteamYield_Trainset
test.data.frame <- SteamYield_Testset
## Input data
SteamYield_Trainset <- subset(SteamYield_Trainset, select = c(-Date))
SteamYield_Testset <- subset(SteamYield_Testset, select = c(-Date))
train.data.frame <- SteamYield_Trainset
test.data.frame <- SteamYield_Testset
## Construct ANN Model
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_ANN_Model.R")
## Construct ANN Model
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_ANN_Model.R")
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_MultiLayer_Extracted_ANN_ClosedFormFomula.R")
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_MultiLayer_Extracted_ANN_ClosedFormFormula.R")
## Construct ANN Model
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_ANN_Model.R")
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_MultiLayer_Extracted_ANN_ClosedFormFormula.R")
##Perform ANN
SteamYield.h2o <- h2o.deeplearning(x, y, train.data.frame.h2o, activation = "Tanh", hidden = c(10,10))
first.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 1)
second.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 2)
third.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 3)
first.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 1)
second.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 2)
third.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 3)
first.Layer.Weights_Num.vector <- t(as.matrix(as.numeric(first.Layer.Weights)))
second.Layer.Weights_Num.vector <- t(as.matrix(as.numeric(second.Layer.Weights)))
third.Layer.Weights_Num.vector <- t(as.matrix(as.numeric(third.Layer.Weights)))
first.Layer.Biases_Num.vector <- t(as.matrix(as.numeric(first.Layer.Biases)))
second.Layer.Biases_Num.vector <- t(as.matrix(as.numeric(second.Layer.Biases)))
third.Layer.Biases_Num.vector <- as.matrix(as.numeric(third.Layer.Biases))
## Define and initialize input dataset
X.input <- as.matrix(subset(test.data.frame, select=c(-Sinter_WasteHeat_Boiler_SteamYield)))
train.X.data <- as.matrix(subset(train.data.frame, select=c(-Sinter_WasteHeat_Boiler_SteamYield)))
normalized.X.input <- NULL
dataFrame.Y.output <- NULL
mean.X.input <- NULL
std.X.input <- NULL
## Get X's means and standard deviations from train dataset (for Normalization)
for(i in 1:ncol(train.X.data)){
mean.data <-apply(as.data.frame(train.X.data[,i]), MARGIN = 2, FUN = function(x)(mean(x, na.rm = TRUE)))
std.data <-apply(as.data.frame(train.X.data[,i]), MARGIN = 2, FUN = function(x)(sd(x, na.rm = TRUE)))
mean.X.input <- cbind(mean.X.input, mean.data)
std.X.input <- cbind(std.X.input, std.data)
}
## Perform Normalization (X data)
for(i in 1:ncol(X.input)){
normalized.data <- apply(as.data.frame(X.input[,i]), MARGIN = 2,
FUN = function(x, na.rm = TRUE)((x - mean.X.input[,i]) / std.X.input[,i]))
normalized.X.input <- cbind(normalized.X.input, normalized.data)
}
## ANN "Feed-forward propagation" formula
for(i in 1:nrow(X.input)){
input.x.matrix <- matrix(normalized.X.input[i,], nrow = 1)
## Matrix multiplication (First hidden layer)
first.hidden.layer.beforeA.F. <- input.x.matrix %*% first.Layer.Weights_Num.vector + first.Layer.Biases_Num.vector
## Activation function (Tanh)
first.hidden.layer.afterA.F. <- 1 - 2 / (1 + exp(2*(first.hidden.layer.beforeA.F.)))
## Matrix multiplication (Second hidden layer)
second.hidden.layer.beforeA.F. <- first.hidden.layer.afterA.F. %*% second.Layer.Weights_Num.vector + second.Layer.Biases_Num.vector
## Activation function (Tanh)
second.hidden.layer.afterA.F. <- 1 - 2 / (1 + exp(2*(second.hidden.layer.beforeA.F.)))
## Matrix multiplication (third hidden layer)
third.hidden.layer.beforeA.F. <- second.hidden.layer.afterA.F. %*% third.Layer.Weights_Num.vector + third.Layer.Biases_Num.vector
Y.output <- third.hidden.layer.beforeA.F.
dataFrame.Y.output <- rbind(dataFrame.Y.output, Y.output)
}
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_MultiLayer_Extracted_ANN_ClosedFormFormula.R")
first.Layer.Weights
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
first.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 1)
first.Layer.Weights
second.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 2)
second.Layer.Weights
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
first.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 1)
second.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 2)
third.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 3)
first.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 1)
second.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 2)
third.Layer.Biases <- h2o.biases(SteamYield.h2o, vector_id = 3)
View(first.Layer.Biases_Num.vector)
View(first.Layer.Weights_Num.vector)
View(second.Layer.Biases_Num.vector)
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
NOx.Emission_Trainset <- read_excel("D:/work/dataset/NOx_prediction_(Boiler_9)_ver4.xlsx", sheet = "train")
NOx.Emission_Testset <- read_excel("D:/work/dataset/NOx_prediction_(Boiler_9)_ver4.xlsx", sheet = "test")
## Calculating average O2
Average.O2_Train <- (subset(NOx.Emission_Trainset, select="O2_D") +
subset(NOx.Emission_Trainset, select="O2_E") +
subset(NOx.Emission_Trainset, select="O2_F")) / 3
Average.O2_Test  <- (subset(NOx.Emission_Testset, select="O2_D") +
subset(NOx.Emission_Testset, select="O2_E") +
subset(NOx.Emission_Testset, select="O2_F")) / 3
colnames(Average.O2_Train) <- "Average_O2"
colnames(Average.O2_Test) <- "Average_O2"
NOx.Emission_Trainset <- cbind(NOx.Emission_Trainset[,1:10], Average.O2_Train)
NOx.Emission_Testset  <- cbind(NOx.Emission_Testset[,1:10], Average.O2_Test)
## Input data
train.data.frame <- NOx.Emission_Trainset
test.data.frame <- NOx.Emission_Testset
## Construct ANN Model
source("D:/work/Rcode/BoilerEFF/NOx_Prediction/Average_O2/BoilerEFF_ANN_Model_NOx.R")
## Construct ANN Model
source("D:/work/Rcode/BoilerEFF/NOx_Prediction/Development Code/Average_O2/BoilerEFF_ANN_Model_NOx.R")
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/BoilerEFF/NOx_Prediction/Development Code/Average_O2/BoilerEFF_MultiLayer_Extracted_ANN_ClosedFormFormula_NOx.R")
first.Layer.Weights <- h2o.weights(NOx.Emission.h2o, matrix_id = 1)
first.Layer.Weights
## Export weights and biases from trained ANN
h2o.download_pojo(NOx.Emission.h2o)
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
SteamYield_Testset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "test")
View(SteamYield_Trainset)
View(SteamYield_Testset)
## Input data
SteamYield_Trainset <- subset(SteamYield_Trainset, select = c(-Date))
SteamYield_Testset <- subset(SteamYield_Testset, select = c(-Date))
train.data.frame <- SteamYield_Trainset
test.data.frame <- SteamYield_Testset
## Construct ANN Model
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_ANN_Model.R")
## Extract ANN's "Closed-form Formula (Feed-forward propagation) Formula"
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_MultiLayer_Extracted_ANN_ClosedFormFormula.R")
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
first.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 1)
first.Layer.Weights
h2o.weights(SteamYield.h2o, matrix_id = 1)
View(mean.X.input)
View(second.Layer.Weights_Num.vector)
View(SteamYield.h2o)
version('h2o')
packageDiscription("h2o")
help(package="h2o")
install.packages(h2o)
install.packages("h2o")
install.packages("h2o")
update.packages("h2o")
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
## h2o Input data
h2o.init()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-wolpert/2/R")
library(h2o)
## h2o Input data
h2o.init()
train.data.frame.h2o <- as.h2o(train.data.frame)
test.data.frame.h2o <- as.h2o(test.data.frame)
h2o.clusterInfo()
remove.packages("h2o")
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
SteamYield_Testset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "test")
View(SteamYield_Trainset)
View(SteamYield_Testset)
## Input data
SteamYield_Trainset <- subset(SteamYield_Trainset, select = c(-Date))
SteamYield_Testset <- subset(SteamYield_Testset, select = c(-Date))
train.data.frame <- SteamYield_Trainset
test.data.frame <- SteamYield_Testset
## Construct ANN Model
source("D:/work/Rcode/SinterBoiler_SuctionFanRPM_Control/SteamYield_ANN_Model.R")
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
first.Layer.Weights <- h2o.weights(SteamYield.h2o, matrix_id = 1)
first.Layer.Weights
h2o.clusterInfo(h2o)
h2o.clusterInfo("h2o")
h2o.clusterInfo()
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
## Export weights and biases from trained ANN
h2o.download_pojo(SteamYield.h2o)
## h2o Input data
h2o.init()
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
SteamYield_Testset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "test")
View(SteamYield_Trainset)
View(SteamYield_Testset)
## Input data
SteamYield_Trainset <- subset(SteamYield_Trainset, select = c(-Date))
SteamYield_Testset <- subset(SteamYield_Testset, select = c(-Date))
train.data.frame <- SteamYield_Trainset
test.data.frame <- SteamYield_Testset
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
SteamYield_Testset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "test")
## Input data
SteamYield_Trainset <- subset(SteamYield_Trainset, select = c(-Date))
SteamYield_Testset <- subset(SteamYield_Testset, select = c(-Date))
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
## Read data from Excel worksheets
SteamYield_Trainset <- read_excel("D:/work/dataset/GY_ElectricPowerStation_TrainData.xlsx", sheet = "train")
